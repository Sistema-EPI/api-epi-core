services:
  postgres:
    image: postgres:16-alpine
    container_name: api-epi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: api_epi_core
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d api_epi_core']
      interval: 30s
      timeout: 10s
      retries: 3

  api-epi-core:
    container_name: api-epi-core
    restart: unless-stopped
    build:
      context: .
      dockerfile: docker/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/api_epi_core?schema=public
      - NODE_ENV=${NODE_ENV:-production}
      - ENV=${ENV:-prod}
      - PORT=${PORT:-3000}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-24h}
      - API_CONSULTA_URL=${API_CONSULTA_URL}
      - API_KEY=${API_KEY}
      - API_TOKEN=${API_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - '${PORT:-3000}:${PORT:-3000}'
    volumes:
      - ./logs:/usr/src/app/logs
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:${PORT:-3000}/health',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
